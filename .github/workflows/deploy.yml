name: Deploy JAR to deploy branch

on:
  push:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout deploy branch
        uses: actions/checkout@v4
        with:
          ref: deploy
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Get JAR file info
        id: jar-info
        run: |
          JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
          JAR_NAME=$(basename $JAR_FILE)
          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "jar_name=$JAR_NAME" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR_NAME"

      - name: Create build archive
        run: |
          # –°—Ç–≤–æ—Ä—é—î–º–æ ZIP –∞—Ä—Ö—ñ–≤ –∑ —É—Å—ñ—î—é –ø–∞–ø–∫–æ—é target
          zip -r build-artifacts.zip target/
          echo "Created build archive with all build artifacts"

      - name: Generate release tag
        id: tag
        run: |
          # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–≥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
          TAG="v$(date +'%Y.%m.%d-%H%M%S')"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          body: |
            üöÄ **Auto-generated release from deploy branch**
            
            **Changes:**
            - Built from deploy branch (commit: ${{ github.sha }})
            - JAR file: `${{ steps.jar-info.outputs.jar_name }}`
            
            **Downloads:**
            - üì¶ **JAR —Ñ–∞–π–ª**: –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ—Å–Ω–æ–≤–Ω–∏–π JAR —Ñ–∞–π–ª –∑ Assets –Ω–∏–∂—á–µ
            - üóúÔ∏è **Build –∞—Ä—Ö—ñ–≤**: –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ø–æ–≤–Ω–∏–π ZIP –∞—Ä—Ö—ñ–≤ –∑ —É—Å—ñ–º–∞ –±—ñ–ª–¥ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
            
            **Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.jar-info.outputs.jar_file }}
          asset_name: ${{ steps.jar-info.outputs.jar_name }}
          asset_content_type: application/java-archive

      - name: Upload Build Archive to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts.zip
          asset_name: build-artifacts-${{ steps.tag.outputs.tag }}.zip
          asset_content_type: application/zip